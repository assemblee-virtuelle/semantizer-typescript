/*
Copyright (C) 2022 Maxime Lecoq <maxime@lecoqlibre.fr>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import SemantizerDefault from './SemantizerDefault.js';

export { default as Semantizer } from './Semantizer.js';
export { default as Context } from './Context.js';
export { default as Semanticable } from './Semanticable.js';
export { default as SemantizerDefault } from './SemantizerDefault.js';
export { default as ContextDefault } from './ContextDefault.js';
export { default as SemanticObject } from './SemanticObject.js';
export { default as SemanticObjectAnonymous } from './SemanticObjectAnonymous.js';

const semantizer = new SemantizerDefault();

// Import de données
semantizer.importSemanticResource("path/to/measures.jsonld"); // import thesaurus
const importedAddress = semantizer.importSemanticResource("https://example.org/address");
const importedJson = semantizer.importSemanticResource("json data");

// 2 possibilités d'export:
const address = semantizer.createSemanticResource({ semanticId: "https://example.org/address", semanticType: "dfc-b:Address" });
const addressAnonymous = semantizer.createSemanticResource({ semanticType: "dfc-b:Address" });
semantizer.exportSemanticResource(address, addressAnonymous);

const exportedDocument = semantizer.createSemanticResource({ semanticContainedResource: [address, addressAnonymous] });
//exportedDocument.addSemanticContainedResource(address, addressAnonymous);
semantizer.exportSemanticResource(exportedDocument);
// exportedDocument.export();

// Ajout d'un blank node
const person = semantizer.createSemanticResource({ semanticId: "", semanticType: "dfc-b:Person" });
person.addValueForSemanticPropertyUrl("dfc-b:hasAddress", addressAnonymous);

// Création de document
const catalogItem1 = semantizer.createSemanticResource({ 
    semanticId: "https://example.org/catalog#ci1", // ou #ci1
    semanticType: "dfc-b:CatalogItem" 
});

const catalog = semantizer.createSemanticResource({ 
    semanticId: "https://example.org/catalog", 
    semanticType: ["dfc-b:Catalog", "dfc-b:CatalogDocument"], 
    semanticContainedResource: catalogItem1
});

const catalogItem2 = semantizer.createSemanticResource({ semanticType: "dfc-b:CatalogItem" }); // blank node
catalog.addSemanticContainedResource(catalogItem2); // génération d'un id avec fragment + suppression du blank node.
catalogItem2.getSemanticId(); // #autogeneratedId
catalogItem2.setSemanticId("https://example.org/catalog#ci2"); // il faut modifier l'id précédent
catalogItem2.setSemanticId("#ci2"); // on peut utiliser un # pour remplacer par la base

// Catalog.addCatalogItem(item: CatalogItem) {
//  this.addSemanticProperty("dfc-b:lists", item);
//  this.addSemanticResource(item);
// }



// Création d'un object (=1 document avec 1 seul resource non blank node)
const catalog2 = semantizer.createSemanticResource({ semanticId: "" })
catalog2.addValueForSemanticPropertyBoolean(...);
catalog2.addSemanticContainedResource(); // l'objet devient un document

// Ajouter soit:
// - au sujet du document (mainResource/primaryTopic) -> via propriétés
// - avec un fragment
// - avec une URI differente

// Création d'un blank node (=1 document avec 1 seul blank node)
const blankNode = semantizer.createSemanticResource();
blankNode.addValueForSemanticPropertyBoolean(...);
blankNode.addSemanticContainedResource(); // le blank node devient un document

// Création d'un document (=1 document avec plusieurs resources)
const document = semantizer.createSemanticResource(); // document vierge 
document.addValueForSemanticPropertyString("metadonnee1", "");

document.addSemanticContainedResource()

// Si resource distante alors pas possible de modifier le semanticID
// SI resource locale, possible d'assigner un semantic ID

// PB: il faut savoir où stocker la resource avant de la créer.
// const container = new LdpContainer();
// const resource = container.createSemanticResource()