import DatasetExt from "rdf-ext/lib/Dataset";
import Context from "./Context.js";
import { Document } from "./Document.js";
import Resource from "./Resource.js";
import Thing from "./Thing.js";
import ThingFactory from './ThingFactory.js';
export declare class DocumentDefaultImpl<ContainedThing extends Thing = Thing, SelfDescribingThing extends Thing = Thing> implements Document {
    private _thingFactory;
    private _uri;
    private _selfDescribingThing;
    private _things;
    private _context?;
    constructor(thingFactory: ThingFactory<ContainedThing, SelfDescribingThing>, uri?: string, context?: Context);
    forEach(callbackfn: (value: ContainedThing, index: number, array: ContainedThing[]) => void, thisArg?: any): void;
    map(callbackfn: (value: ContainedThing, index: number, array: ContainedThing[]) => unknown, thisArg?: any): unknown[];
    [Symbol.iterator](): Iterator<ContainedThing, any, undefined>;
    setContext(context: Context): void;
    getContext(): Context | undefined;
    expand(uri: string): string;
    shorten(uri: string): string;
    add(thing: ContainedThing): Document;
    getThingFactory(): ThingFactory<ContainedThing, SelfDescribingThing>;
    protected setThings(things: ContainedThing[]): void;
    protected addAndReturnThing(thing: ContainedThing): ContainedThing;
    addDocument(document: Document): Document;
    equals(other: Document): boolean;
    get(uri: string): ContainedThing | null;
    protected isUrl(input: string): boolean;
    protected generateUriWithFragment(): string;
    protected getOrCreateNameWithHash(nameWithOrWithoutHash: string): string;
    protected createUriWithFragment(name: string): string;
    protected checkUriCanBeAddedToTheDocument(uri: string): boolean;
    protected getSafeUriFromUri(uri: string): string;
    protected getSafeUriFromName(name: string): string;
    protected getSafeUriFromNameHintOrUri(nameHintOrUri: string): string;
    createThingToSelfDescribe(): SelfDescribingThing;
    createThing(nameHintOrUri?: string): ContainedThing;
    createThingWithoutUri(nameHint?: string): ContainedThing;
    generateThingName(): string;
    protected validateOrCreateThingUri(nameHintOrUri?: string): string;
    protected validateNameHintForThingWithoutUri(nameHint: string): void;
    protected validateAndCreateThingWithoutUri(nameHint?: string): ContainedThing;
    delete(thingOrUri: string | Thing): void;
    getUri(): string;
    setUri(uri: string): void;
    isEmpty(): boolean;
    private _getThings;
    getThingThatSelfDescribes(): SelfDescribingThing | null;
    protected setThingThatSelfDescribes(thing: SelfDescribingThing): SelfDescribingThing | null;
    count(): number;
    hasStatementsAbout(subject: string | Resource, property?: string, ...hasValues: string[]): boolean;
    filter(predicate: (value: ContainedThing, index: number, array: ContainedThing[]) => boolean): ContainedThing[];
    toRdfDatasetExt(): DatasetExt;
}
export default DocumentDefaultImpl;
//# sourceMappingURL=DocumentDefaultImpl.d.ts.map