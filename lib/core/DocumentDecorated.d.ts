import { Context } from "./Context";
import { ContainedThingOf, Document, DocumentReadonly, SelfDescribingThingOf } from "./Document";
import Factory from "./Factory";
import Resource from "./Resource";
export declare class DocumentDecorated<DocumentType extends Document<any, any>> implements Document<ContainedThingOf<DocumentType>, SelfDescribingThingOf<DocumentType>> {
    protected _wrapped: Document<ContainedThingOf<DocumentType>, SelfDescribingThingOf<DocumentType>>;
    constructor(wrapped: Document<ContainedThingOf<DocumentType>, SelfDescribingThingOf<DocumentType>>);
    getFactory(): Factory<Document<ContainedThingOf<DocumentType>, SelfDescribingThingOf<DocumentType>>>;
    toCopy(): this;
    toCopyReadonly<DocumentCopied extends DocumentReadonly<any, any>>(): DocumentCopied;
    toCopyWritable<DocumentCopied extends Document<any, any>>(): DocumentCopied;
    createThingToSelfDescribe(): SelfDescribingThingOf<DocumentType>;
    createThingWithoutUri(nameHint?: string | undefined): ContainedThingOf<DocumentType>;
    add(thing: ContainedThingOf<DocumentType>): this;
    addAll(documentOrThings: DocumentType | ContainedThingOf<DocumentType>[]): this;
    delete(thingOrUri: string | ContainedThingOf<DocumentType>): this;
    deleteContext(): void;
    deleteMatches(uri?: string | Resource | undefined, property?: string | undefined, value?: string | undefined): this;
    pop(): ContainedThingOf<DocumentType> | undefined;
    reverse(): void;
    setContext(context: Context): void;
    shift(): ContainedThingOf<DocumentType> | undefined;
    sort(compareFn?: ((a: ContainedThingOf<DocumentType>, b: ContainedThingOf<DocumentType>) => number) | undefined): this;
    splice(start: number, deleteCount?: number | undefined, ...items: ContainedThingOf<DocumentType>[]): this;
    union(other: DocumentType): this;
    createThingWithUri(nameHintOrUri?: string): ContainedThingOf<DocumentType>;
    protected getWrappedDocument(): Document<ContainedThingOf<DocumentType>, SelfDescribingThingOf<DocumentType>>;
    get(uri: string | Resource): ContainedThingOf<DocumentType> | undefined;
    getContext(): Context | undefined;
    getThingThatSelfDescribes(): SelfDescribingThingOf<DocumentType> | undefined;
    has(thing: string | Resource): boolean;
    hasThingThatSelfDescribes(): boolean;
    isEmpty(): boolean;
    toCanonical(): string;
    toStream(): string;
    [Symbol.iterator](): Iterator<ContainedThingOf<DocumentType>>;
    getUri(): string;
    at(index: number): ContainedThingOf<DocumentType> | undefined;
    contains(other: this): boolean;
    count(callbackfn?: (thing: ContainedThingOf<DocumentType>, document?: ThisType<this>) => boolean): number;
    difference(other: DocumentType): DocumentType;
    equals(other: DocumentType): boolean;
    every(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, array?: ContainedThingOf<DocumentType>[] | undefined) => boolean, thisArg?: any): boolean;
    filter(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, array?: ContainedThingOf<DocumentType>[] | undefined) => boolean): ContainedThingOf<DocumentType>[];
    find(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, obj?: ContainedThingOf<DocumentType>[] | undefined) => boolean, thisArg?: any): ContainedThingOf<DocumentType> | undefined;
    findIndex(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, obj?: ContainedThingOf<DocumentType>[] | undefined) => unknown, thisArg?: any): number;
    forEach(callbackfn: (value: ContainedThingOf<DocumentType>, index?: number | undefined, array?: ContainedThingOf<DocumentType>[] | undefined) => void, thisArg?: any): void;
    includes(searchElement: ContainedThingOf<DocumentType>, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ContainedThingOf<DocumentType>, fromIndex?: number | undefined): number;
    keys(): IterableIterator<number>;
    map(callbackfn: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): unknown[];
    reduce(callbackfn: (previousValue: ContainedThingOf<DocumentType>, currentValue: ContainedThingOf<DocumentType>, currentIndex: number, array: ContainedThingOf<DocumentType>[]) => ContainedThingOf<DocumentType>): ContainedThingOf<DocumentType>;
    slice(start?: number | undefined, end?: number | undefined): this;
    some(predicate: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): boolean;
}
export default DocumentDecorated;
//# sourceMappingURL=DocumentDecorated.d.ts.map