import { Resource, Context } from "./Common";
import { Document, DocumentWritable, Statement } from "./Document";
export declare class DocumentDecoratedImpl<ContainedStatement extends Statement = Statement, SelfDescribingStatement extends Statement = Statement> implements DocumentWritable<ContainedStatement, SelfDescribingStatement> {
    protected _wrapped: DocumentWritable<ContainedStatement, SelfDescribingStatement>;
    constructor(wrapped: DocumentWritable<ContainedStatement, SelfDescribingStatement>);
    createThing(about: string, value: string): ContainedStatement;
    addThing(other: ContainedStatement): ThisType<this>;
    addThingAll(others: Iterable<ContainedStatement>): ThisType<this>;
    createThingAboutSelf(value: string): ThisType<this>;
    addStatementAboutSelf(other: ContainedStatement): ThisType<this>;
    addStatementAboutSelfAll(others: Iterable<ContainedStatement>): ThisType<this>;
    getStatement(about: string, property: string): ContainedStatement;
    getStatementAll(about: string, property: string): ContainedStatement[];
    getStatementAboutSelf(property: string): SelfDescribingStatement;
    getStatementAboutSelfAll(property: string): SelfDescribingStatement[];
    hasStatement(about: string, property: string): boolean;
    hasStatementAboutSelf(): boolean;
    [Symbol.iterator](): Iterator<ContainedStatement, any, undefined>;
    createStatementType(about: string, value: string): ThisType<this>;
    addStatementType(other: ContainedStatement): ThisType<this>;
    addStatementTypeAll(others: Iterable<ContainedStatement>): ThisType<this>;
    createStatementTypeAboutSelf(value: string): ThisType<this>;
    addStatementTypeAboutSelf(other: ContainedStatement): ThisType<this>;
    addStatementTypeAboutSelfAll(others: Iterable<ContainedStatement>): ThisType<this>;
    deleteStatement(element: ContainedStatement): ThisType<this>;
    deleteMatches(uri?: string | Resource | undefined, property?: string | undefined, value?: string | undefined): ThisType<this>;
    pop(): ContainedStatement | undefined;
    reverse(): void;
    shift(): ContainedStatement | undefined;
    sort(compareFn?: ((a: ContainedStatement, b: ContainedStatement) => number) | undefined): ThisType<this>;
    splice(start: number, deleteCount?: number | undefined, ...items: ContainedStatement[]): ThisType<this>;
    getStatementType(about: string, property: string): ContainedStatement;
    getStatementTypeAll(about: string, property: string): ContainedStatement[];
    getStatementTypeAboutSelf(property: string): ContainedStatement;
    getStatementTypeAboutSelfAll(property: string): ContainedStatement[];
    hasStatementType(about: string, property: string): boolean;
    hasStatementTypeAboutSelf(): boolean;
    at(index: number): ContainedStatement | undefined;
    contains(other: Document): boolean;
    count(): number;
    every(predicate: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => boolean, thisArg?: any): boolean;
    filter(predicate: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => boolean): ContainedStatement[];
    find(predicate: (value: ContainedStatement, index?: number | undefined, obj?: ContainedStatement[] | undefined) => boolean, thisArg?: any): ContainedStatement | undefined;
    findIndex(predicate: (value: ContainedStatement, index?: number | undefined, obj?: ContainedStatement[] | undefined) => unknown, thisArg?: any): number;
    forEach(callbackfn: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => void, thisArg?: any): void;
    includes(searchElement: ContainedStatement, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ContainedStatement, fromIndex?: number | undefined): number;
    keys(): IterableIterator<number>;
    map(callbackfn: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => unknown, thisArg?: any): unknown[];
    reduce(callbackfn: (previousValue: ContainedStatement, currentValue: ContainedStatement, currentIndex: number, array: ContainedStatement[]) => ContainedStatement): ContainedStatement;
    slice(start?: number | undefined, end?: number | undefined): Document;
    some(predicate: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => unknown, thisArg?: any): boolean;
    getUri(): string;
    hasUri(): boolean;
    isEmpty(): boolean;
    getContext(): Context | undefined;
    equals(other: ThisType<this>): boolean;
    difference(other: ThisType<this>): ThisType<this>;
    toCopy(): ThisType<this>;
    deleteContext(): void;
    setContext(context: Context): void;
}
export default DocumentDecoratedImpl;
//# sourceMappingURL=Decorated.d.ts.map