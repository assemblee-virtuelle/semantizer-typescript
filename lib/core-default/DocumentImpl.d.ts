import { Context } from "../core/Common.js";
import { Document, DocumentWritable, Statement, StatementWritable } from "../core/Document.js";
import StatementImpl from "./StatementImpl.js";
export type StatementConstructor<StatementType extends Statement = Statement> = new (about: string, property: string, value: string, datatype?: string, language?: string) => StatementType;
export declare class DocumentImpl<ContainedStatement extends Statement, SelfDescribingStatement extends Statement, ContainedStatementImpl extends ContainedStatement & StatementWritable, SelfDescribingStatementImpl extends SelfDescribingStatement & StatementWritable> implements DocumentWritable<ContainedStatement, SelfDescribingStatement> {
    private _containedStatements;
    private _selfDescribingStatements;
    private _containedStatementImpl;
    private _selfDescribingStatementImpl;
    constructor(containedStatementImpl: StatementConstructor<ContainedStatementImpl>, selfDescribingStatementImpl: StatementConstructor<SelfDescribingStatementImpl>);
    protected getContainedStatementsInternal(): ContainedStatementImpl[];
    protected getSelfDescribingStatementsInternal(): SelfDescribingStatementImpl[];
    createStatement(about: string, property: string, value: string, datatype?: string, language?: string): ContainedStatement;
    private createContainedStatementFrom;
    private createSelfDescribingStatementFrom;
    addStatement(other: Statement): ThisType<this>;
    addStatementAll(others: Iterable<Statement>): ThisType<this>;
    createStatementAboutSelf(property: string, value: string, datatype?: string, language?: string): ThisType<this>;
    addStatementAboutSelf(other: Statement): ThisType<this>;
    addStatementAboutSelfAll(others: Iterable<Statement>): ThisType<this>;
    deleteStatement(statement: Statement): ThisType<this>;
    pop(): ContainedStatement | undefined;
    reverse(): void;
    shift(): ContainedStatement | undefined;
    sort(compareFn?: ((a: ContainedStatement, b: ContainedStatement) => number) | undefined): ThisType<this>;
    splice(start: number, deleteCount?: number | undefined, ...items: ContainedStatement[]): ThisType<this>;
    private getStatementInternal;
    getStatement(about: string, property: string, language?: string): ContainedStatement | undefined;
    getStatementAll(about: string, property?: string, language?: string): ContainedStatement[];
    getStatementAboutSelf(property: string, language?: string): SelfDescribingStatement | undefined;
    getStatementAboutSelfAll(property?: string, language?: string): SelfDescribingStatement[];
    hasStatement(about: string, property?: string, language?: string): boolean;
    hasStatementAboutSelf(property?: string, language?: string): boolean;
    at(index: number): ContainedStatement | undefined;
    contains(other: Document): boolean;
    count(): number;
    every(predicate: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => boolean, thisArg?: any): boolean;
    filter(predicate: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => boolean): ContainedStatement[];
    find(predicate: (value: ContainedStatement, index?: number | undefined, obj?: ContainedStatement[] | undefined) => boolean, thisArg?: any): ContainedStatement | undefined;
    findIndex(predicate: (value: ContainedStatement, index?: number | undefined, obj?: ContainedStatement[] | undefined) => unknown, thisArg?: any): number;
    forEach(callbackfn: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => void, thisArg?: any): void;
    includes(searchElement: ContainedStatement, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ContainedStatement, fromIndex?: number | undefined): number;
    keys(): IterableIterator<number>;
    map(callbackfn: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => unknown, thisArg?: any): unknown[];
    reduce(callbackfn: (previousValue: ContainedStatement, currentValue: ContainedStatement, currentIndex: number, array: ContainedStatement[]) => ContainedStatement): ContainedStatement;
    setStatementAbout(about: string, property: string, value: string, dataset?: string, language?: string): void;
    slice(start?: number | undefined, end?: number | undefined): Document;
    some(predicate: (value: ContainedStatement, index?: number | undefined, array?: ContainedStatement[] | undefined) => unknown, thisArg?: any): boolean;
    [Symbol.iterator](): Iterator<ContainedStatement, any, undefined>;
    getUri(): string;
    hasUri(): boolean;
    isEmpty(): boolean;
    getContext(): Context | undefined;
    equals(other: ThisType<this>): boolean;
    difference(other: ThisType<this>): ThisType<this>;
    toCopy(): ThisType<this>;
    deleteContext(): void;
    setContext(context: Context): void;
}
export declare class DocumentImplDefault extends DocumentImpl<Statement, Statement, StatementImpl, StatementImpl> {
    constructor();
}
export default DocumentImpl;
//# sourceMappingURL=DocumentImpl.d.ts.map