import { Context } from "../core/Context.js";
import { Document, DocumentBase, DocumentReadonly } from "../core/Document.js";
import Factory from "../core/Factory.js";
import Resource from "../core/Resource.js";
import { ThingBase } from "../core/Thing.js";
export declare class DocumentImpl<ContainedThing extends ThingBase<any>, SelfDescribingThing extends ThingBase<any>> implements Document<ContainedThing, SelfDescribingThing> {
    protected _uri: string;
    protected _selfDescribingThing?: SelfDescribingThing;
    protected _things: ContainedThing[];
    protected _context?: Context;
    protected _factory: Factory<DocumentImpl<ContainedThing, SelfDescribingThing>>;
    constructor(factory: Factory<DocumentImpl<ContainedThing, SelfDescribingThing>>);
    getFactory(): Factory<DocumentImpl<ContainedThing, SelfDescribingThing>>;
    toCopy(): this;
    toCopyReadonly<DocumentCopied extends DocumentReadonly<any, any>>(): DocumentCopied;
    toCopyWritable<DocumentCopied extends Document<any, any>>(): DocumentCopied;
    createThingToSelfDescribe(): SelfDescribingThing;
    createThingWithoutUri(nameHint?: string | undefined): ContainedThing;
    add(thing: ContainedThing): this;
    addAll(documentOrThings: DocumentBase<any, any> | ContainedThing[]): this;
    delete(thingOrUri: string | ContainedThing): this;
    deleteContext(): void;
    deleteMatches(uri?: string | Resource | undefined, property?: string | undefined, value?: string | undefined): this;
    pop(): ContainedThing | undefined;
    reverse(): void;
    setContext(context: Context): void;
    shift(): ContainedThing | undefined;
    sort(compareFn?: ((a: ContainedThing, b: ContainedThing) => number) | undefined): this;
    splice(start: number, deleteCount?: number | undefined, ...items: ContainedThing[]): this;
    union(other: DocumentBase<any, any>): this;
    protected addAndReturnContainedThing(thing: ContainedThing): ContainedThing;
    generateContainedThingName(): string;
    protected generateUriWithFragment(): string;
    protected getOrCreateNameWithHash(nameWithOrWithoutHash: string): string;
    protected createUriWithFragment(name: string): string;
    protected checkUriCanBeAddedToTheDocument<ContainedThing, SelfDescribingThing>(uri: string): boolean;
    protected getSafeUriFromUri(uri: string): string;
    protected getSafeUriFromName(name: string): string;
    protected getSafeUriFromNameHintOrUri(nameHintOrUri: string): string;
    protected validateOrCreateContainedThingUri(nameHintOrUri?: string): string;
    createThingWithUri(nameHintOrUri?: string): ContainedThing;
    protected isUrl(input: string): boolean;
    protected hasStatementsAbout(subject: string | Resource, property?: string, ...hasValues: string[]): boolean;
    protected _getContainedThings(): ContainedThing[];
    count(callbackfn?: (thing: ContainedThing, document?: this) => boolean): number;
    get(uri: string | Resource): ContainedThing | undefined;
    getContext(): Context | undefined;
    getThingThatSelfDescribes(): SelfDescribingThing | undefined;
    has(uriOrResource: string | Resource): boolean;
    hasThingThatSelfDescribes(): boolean;
    getUri(): string;
    isEmpty(): boolean;
    toCanonical(): string;
    toStream(): string;
    [Symbol.iterator](): Iterator<ContainedThing>;
    at(index: number): ContainedThing | undefined;
    contains(other: this): boolean;
    difference(other: DocumentBase<any, any>): this;
    every(predicate: (value: ContainedThing, index: number, array: ContainedThing[]) => boolean, thisArg?: any): boolean;
    find(predicate: (value: ContainedThing, index: number, obj: ContainedThing[]) => boolean, thisArg?: any): ContainedThing | undefined;
    findIndex(predicate: (value: ContainedThing, index: number, obj: ContainedThing[]) => unknown, thisArg?: any): number;
    includes(searchElement: ContainedThing, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ContainedThing, fromIndex?: number | undefined): number;
    keys(): IterableIterator<number>;
    reduce(callbackfn: (previousValue: ContainedThing, currentValue: ContainedThing, currentIndex: number, array: ContainedThing[]) => ContainedThing): ContainedThing;
    slice(start?: number, end?: number): this;
    some(predicate: (value: ContainedThing, index: number, array: ContainedThing[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: ContainedThing, index: number, array: ContainedThing[]) => void, thisArg?: any): void;
    map(callbackfn: (value: ContainedThing, index: number, array: ContainedThing[]) => unknown, thisArg?: any): unknown[];
    equals(other: DocumentBase<any, any>): boolean;
    filter(predicate: (value: ContainedThing, index: number, array: ContainedThing[]) => boolean): ContainedThing[];
}
export default DocumentImpl;
//# sourceMappingURL=DocumentImpl.d.ts.map