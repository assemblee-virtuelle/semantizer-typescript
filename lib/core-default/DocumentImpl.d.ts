import { Context } from "../core/Context.js";
import { ContainedThingOf, Document, DocumentBase, DocumentReadonly, SelfDescribingThingOf } from "../core/Document.js";
import Factory, { FactoryForCopying } from "../core/Factory.js";
import Resource from "../core/Resource.js";
import { StatementReadonly } from "../core/Statement.js";
import { ThingReadonly } from "../core/Thing.js";
export declare class DocumentImpl<DocumentType extends DocumentBase<any, any>, //DocumentBase<Thing<Statement<any>, any>, any>, any>,
DocumentTypeReadonly extends DocumentBase<ThingReadonly<StatementReadonly<any>, any>, ThingReadonly<StatementReadonly<any>, any>>> implements Document<DocumentType, DocumentTypeReadonly> {
    protected _uri: string;
    protected _selfDescribingThing?: SelfDescribingThingOf<DocumentType>;
    protected _things: ContainedThingOf<DocumentType>[];
    protected _context?: Context;
    protected _factory: Factory<Document<DocumentType, DocumentTypeReadonly>>;
    constructor(factory: Factory<any>);
    getFactoryForCopying(): FactoryForCopying<Document<DocumentType, DocumentTypeReadonly>>;
    getFactory(): Factory<Document<DocumentType, DocumentTypeReadonly>>;
    toCopy(): this;
    toCopyReadonly(): DocumentTypeReadonly;
    createThingToSelfDescribe(): SelfDescribingThingOf<DocumentType>;
    createThingWithoutUri(nameHint?: string | undefined): ContainedThingOf<DocumentType>;
    add(thing: ContainedThingOf<DocumentType>): this;
    addAll(documentOrThings: DocumentBase<any, any> | ContainedThingOf<DocumentType>[]): this;
    delete(thingOrUri: string | ContainedThingOf<DocumentType>): this;
    deleteContext(): void;
    deleteMatches(uri?: string | Resource | undefined, property?: string | undefined, value?: string | undefined): this;
    pop(): ContainedThingOf<DocumentType> | undefined;
    reverse(): void;
    setContext(context: Context): void;
    shift(): ContainedThingOf<DocumentType> | undefined;
    sort(compareFn?: ((a: ContainedThingOf<DocumentType>, b: ContainedThingOf<DocumentType>) => number) | undefined): this;
    splice(start: number, deleteCount?: number | undefined, ...items: ContainedThingOf<DocumentType>[]): this;
    union(other: DocumentBase<any, any>): this;
    protected addAndReturnContainedThing(thing: ContainedThingOf<DocumentType>): ContainedThingOf<DocumentType>;
    generateContainedThingName(): string;
    protected generateUriWithFragment(): string;
    protected getOrCreateNameWithHash(nameWithOrWithoutHash: string): string;
    protected createUriWithFragment(name: string): string;
    protected checkUriCanBeAddedToTheDocument(uri: string): boolean;
    protected getSafeUriFromUri(uri: string): string;
    protected getSafeUriFromName(name: string): string;
    protected getSafeUriFromNameHintOrUri(nameHintOrUri: string): string;
    protected validateOrCreateContainedThingUri(nameHintOrUri?: string): string;
    createThingWithUri(nameHintOrUri?: string): ContainedThingOf<DocumentType>;
    protected isUrl(input: string): boolean;
    protected hasStatementsAbout(subject: string | Resource, property?: string, ...hasValues: string[]): boolean;
    protected _getContainedThings(): ContainedThingOf<DocumentType>[];
    count(callbackfn?: (thing: ContainedThingOf<DocumentType>, document?: this) => boolean): number;
    get(uri: string | Resource): ContainedThingOf<DocumentType> | undefined;
    getContext(): Context | undefined;
    getThingThatSelfDescribes(): SelfDescribingThingOf<DocumentType> | undefined;
    has(uriOrResource: string | Resource): boolean;
    hasThingThatSelfDescribes(): boolean;
    getUri(): string;
    isEmpty(): boolean;
    toCanonical(): string;
    toStream(): string;
    [Symbol.iterator](): Iterator<ContainedThingOf<DocumentType>>;
    at(index: number): ContainedThingOf<DocumentType> | undefined;
    contains(other: this): boolean;
    difference(other: DocumentBase<any, any>): this;
    every(predicate: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => boolean, thisArg?: any): boolean;
    find(predicate: (value: ContainedThingOf<DocumentType>, index: number, obj: ContainedThingOf<DocumentType>[]) => boolean, thisArg?: any): ContainedThingOf<DocumentType> | undefined;
    findIndex(predicate: (value: ContainedThingOf<DocumentType>, index: number, obj: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): number;
    includes(searchElement: ContainedThingOf<DocumentType>, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ContainedThingOf<DocumentType>, fromIndex?: number | undefined): number;
    keys(): IterableIterator<number>;
    reduce(callbackfn: (previousValue: ContainedThingOf<DocumentType>, currentValue: ContainedThingOf<DocumentType>, currentIndex: number, array: ContainedThingOf<DocumentType>[]) => ContainedThingOf<DocumentType>): ContainedThingOf<DocumentType>;
    slice(start?: number, end?: number): this;
    some(predicate: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => void, thisArg?: any): void;
    map(callbackfn: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): unknown[];
    equals(other: DocumentBase<any, any>): boolean;
    filter(predicate: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => boolean): ContainedThingOf<DocumentType>[];
}
export declare class DocumentImplReadonly<DocumentType extends DocumentBase<ThingReadonly<StatementReadonly<any>, any>, ThingReadonly<StatementReadonly<any>, any>>, DocumentTypeWritable extends DocumentBase<any, any>> implements DocumentReadonly<DocumentType, DocumentTypeWritable> {
    constructor(document: Document<any, any>);
    get(uri: string | Resource): ContainedThingOf<DocumentType> | undefined;
    getContext(): Context | undefined;
    getThingThatSelfDescribes(): SelfDescribingThingOf<DocumentType> | undefined;
    has(thing: string | Resource): boolean;
    hasThingThatSelfDescribes(): boolean;
    isEmpty(): boolean;
    toCanonical(): string;
    toStream(): string;
    toCopy(): ThisType<this>;
    [Symbol.iterator](): Iterator<ContainedThingOf<DocumentType>, any, undefined>;
    getUri(): string;
    getFactoryForCopying(): FactoryForCopying<DocumentReadonly<DocumentType, DocumentTypeWritable>>;
    at(index: number): ContainedThingOf<DocumentType> | undefined;
    contains(other: ThisType<this>): boolean;
    count(callbackfn?: ((thing: ContainedThingOf<DocumentType>, document?: ThisType<this> | undefined) => boolean) | undefined): number;
    difference(other: ThisType<this>): ThisType<this>;
    equals(other: ThisType<this>): boolean;
    every(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, array?: ContainedThingOf<DocumentType>[] | undefined) => boolean, thisArg?: any): boolean;
    filter(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, array?: ContainedThingOf<DocumentType>[] | undefined) => boolean): ContainedThingOf<DocumentType>[];
    find(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, obj?: ContainedThingOf<DocumentType>[] | undefined) => boolean, thisArg?: any): ContainedThingOf<DocumentType> | undefined;
    findIndex(predicate: (value: ContainedThingOf<DocumentType>, index?: number | undefined, obj?: ContainedThingOf<DocumentType>[] | undefined) => unknown, thisArg?: any): number;
    forEach(callbackfn: (value: ContainedThingOf<DocumentType>, index?: number | undefined, array?: ContainedThingOf<DocumentType>[] | undefined) => void, thisArg?: any): void;
    includes(searchElement: ContainedThingOf<DocumentType>, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ContainedThingOf<DocumentType>, fromIndex?: number | undefined): number;
    keys(): IterableIterator<number>;
    map(callbackfn: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): unknown[];
    reduce(callbackfn: (previousValue: ContainedThingOf<DocumentType>, currentValue: ContainedThingOf<DocumentType>, currentIndex: number, array: ContainedThingOf<DocumentType>[]) => ContainedThingOf<DocumentType>): ContainedThingOf<DocumentType>;
    slice(start?: number | undefined, end?: number | undefined): ThisType<this>;
    some(predicate: (value: ContainedThingOf<DocumentType>, index: number, array: ContainedThingOf<DocumentType>[]) => unknown, thisArg?: any): boolean;
    toCopyWritable(): DocumentTypeWritable;
}
export default DocumentImpl;
//# sourceMappingURL=DocumentImpl.d.ts.map