import Resource from "../core/Resource";
import { Thing } from "../core/Thing";
type Constructor<T = {}> = new (...args: any[]) => T;
export declare function ThingWithHelpersMixin<TBase extends Constructor<Thing<any, any>>>(Base: TBase): {
    new (...args: any[]): {
        addStatement(about: string, value: string | Resource, datatype?: string, language?: string): any;
        addStatementFrom(source: Thing<any, any>): any;
        addRdfTypeStatement(value: string): any;
        addBooleanStatement(about: string, value: boolean): any;
        addStringStatement(about: string, value: string, locale?: string): any;
        addDecimalStatement(about: string, value: number): any;
        addIntegerStatement(about: string, value: number): any;
        addDateStatement(about: string, value: Date): any;
        addDatetimeStatement(about: string, value: Date): any;
        addTimeStatement(about: string, value: Date): any;
        getRdfTypeValue(): string | null;
        getAllRdfTypeValues(): string[];
        getBooleanStatementValue(about: string): boolean;
        getAllBooleanStatementValues(about: string): boolean[];
        getStringStatementValue(about: string): string | null;
        getAllStringStatementValues(about: string): string[];
        getDecimalStatementValue(about: string): number;
        getAllDecimalStatementValues(about: string): number[];
        getIntegerStatementValue(about: string): number;
        getAllIntegerStatementValues(about: string): number[];
        getDateStatementValue(about: string): Date;
        getAllDateStatementValues(about: string): Date[];
        getDatetimeStatementValue(about: string): Date;
        getAllDatetimeStatementValues(about: string): Date[];
        getTimeStatementValue(about: string): Date;
        getAllTimeStatementValues(about: string): Date[];
        setStatement(about: string, value: string): any;
        setRdfTypeStatement(value: string): any;
        setBooleanStatement(about: string, value: boolean): any;
        setStringStatement(about: string, value: string, locale?: string): any;
        setDecimalStatement(about: string, value: number): any;
        setIntegerStatement(about: string, value: number): any;
        setDateStatement(about: string, value: Date): any;
        setDatetimeStatement(about: string, value: Date): any;
        setTimeStatement(about: string, value: Date): any;
        removeStatement(about: string, value: string | Resource, datatype?: string, language?: string): any;
        removeRdfTypeStatement(value: string): any;
        removeBooleanStatement(about: string, value: boolean): any;
        removeStringStatement(about: string, value: string, locale?: string): any;
        removeDecimalStatement(about: string, value: number): any;
        removeIntegerStatement(about: string, value: number): any;
        removeDateStatement(about: string, value: Date): any;
        removeDatetimeStatement(about: string, value: Date): any;
        removeTimeStatement(about: string, value: Date): any;
        getContext(): import("../core/Context").Context | undefined;
        hasUri(): boolean;
        count(): number;
        isEmpty(): boolean;
        equals(other: import("../core/Thing").ThingBase<any>): boolean;
        get(property: string): any;
        getAll(property: string): any[];
        toCopy(): ThisType<any>;
        [Symbol.iterator](): Iterator<any, any, undefined>;
        getUri(): string;
        getDocument(): any;
        forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void;
        map(callbackfn: (value: any, index: number, array: any[]) => unknown, thisArg?: any): unknown[];
        filter(predicate: (value: any, index: number, array: any[]) => boolean): any[];
        add(statement: any): ThisType<any>;
        remove(about: string, value: string | Resource, datatype?: string | undefined, language?: string | undefined): ThisType<any>;
        removeAll(about: string): ThisType<any>;
        set(about: string, value: string, oldValue?: string | undefined, datatype?: string | undefined, language?: string | undefined): ThisType<any>;
        createStatement(about: string, value: string | Resource, datatype?: string | undefined, language?: string | undefined): any;
        toCopyReadonly(): import("../core/Thing").ThingBase<any>;
        toCopyWritable(): import("../core/Thing").ThingBase<any>;
    };
} & TBase;
export default ThingWithHelpersMixin;
//# sourceMappingURL=ThingWithHelpersMixin.d.ts.map