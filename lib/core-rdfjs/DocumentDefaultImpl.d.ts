import { Context } from "../index";
import DocumentBase from "../core/Document";
import Resource from "../core/Resource";
import ThingBase from "../core-default/Thing";
import DatasetCore from "@rdfjs/dataset/DatasetCore";
import RdfjsDatasetSerializable from './RdfjsDatasetSerializable';
export declare class DocumentDefaultImpl<SelfDescribingThing extends ThingBase = ThingBase> implements DocumentBase<ThingBase, SelfDescribingThing>, RdfjsDatasetSerializable {
    private _dataset;
    constructor(uri?: string, context?: Context);
    at(index: number): ThingBase | undefined;
    add(thing: ThingBase): DocumentBase<ThingBase, SelfDescribingThing>;
    addAll(document: DocumentBase<ThingBase, SelfDescribingThing>): DocumentBase<ThingBase, SelfDescribingThing>;
    contains(other: DocumentBase<ThingBase, SelfDescribingThing>): boolean;
    count(callbackfn?: ((thing: ThingBase, document: DocumentBase<ThingBase, SelfDescribingThing>) => boolean) | undefined): number;
    createLocalCopy(): DocumentBase<ThingBase, SelfDescribingThing>;
    createThingToSelfDescribe(): SelfDescribingThing;
    createThingWithUri(nameHintOrUri?: string | undefined): ThingBase;
    createThingWithoutUri(nameHint?: string | undefined): ThingBase;
    delete(thingOrUri: string | ThingBase): DocumentBase<ThingBase, SelfDescribingThing>;
    deleteContext(): void;
    deleteMatches(uri?: string | Resource | undefined, property?: string | undefined, value?: string | undefined): DocumentBase<ThingBase, SelfDescribingThing>;
    difference(other: DocumentBase<ThingBase, SelfDescribingThing>): DocumentBase<ThingBase, SelfDescribingThing>;
    equals(other: DocumentBase<ThingBase, SelfDescribingThing>): boolean;
    every(predicate: (value: ThingBase, index?: number | undefined, array?: ThingBase[] | undefined) => boolean, thisArg?: any): boolean;
    filter(predicate: (value: ThingBase, index?: number | undefined, array?: ThingBase[] | undefined) => boolean): ThingBase[];
    find(predicate: (value: ThingBase, index?: number | undefined, obj?: ThingBase[] | undefined) => value is ThingBase, thisArg?: any): ThingBase | undefined;
    findIndex(predicate: (value: ThingBase, index?: number | undefined, obj?: ThingBase[] | undefined) => unknown, thisArg?: any): number;
    forEach(callbackfn: (value: ThingBase, index?: number | undefined, array?: ThingBase[] | undefined) => void, thisArg?: any): void;
    get(uri: string | Resource): ThingBase | undefined;
    getContext(): Context | undefined;
    getThingThatSelfDescribes(): SelfDescribingThing | undefined;
    has(thing: string | Resource): boolean;
    hasThingThatSelfDescribes(): boolean;
    includes(searchElement: ThingBase, fromIndex?: number | undefined): boolean;
    indexOf(searchElement: ThingBase, fromIndex?: number | undefined): number;
    isEmpty(): boolean;
    isLocal(): boolean;
    isDistant(): boolean;
    keys(): IterableIterator<number>;
    map(callbackfn: (value: ThingBase, index: number, array: ThingBase[]) => unknown, thisArg?: any): unknown[];
    pop(): ThingBase | undefined;
    reduce(callbackfn: (previousValue: ThingBase, currentValue: ThingBase, currentIndex: number, array: ThingBase[]) => ThingBase): ThingBase;
    reverse(): void;
    setContext(context: Context): void;
    shift(): ThingBase | undefined;
    slice(start?: number | undefined, end?: number | undefined): DocumentBase<ThingBase, SelfDescribingThing>;
    some(predicate: (value: ThingBase, index: number, array: ThingBase[]) => unknown, thisArg?: any): boolean;
    sort(compareFn?: ((a: ThingBase, b: ThingBase) => number) | undefined): DocumentBase<ThingBase, SelfDescribingThing>;
    splice(start: number, deleteCount?: number | undefined, ...items: ThingBase[]): DocumentBase<ThingBase, SelfDescribingThing>;
    toCanonical(): string;
    toGenericDocument(): DocumentBase<ThingBase, SelfDescribingThing>;
    toStream(): string;
    union(other: DocumentBase<ThingBase, SelfDescribingThing>): DocumentBase<ThingBase, SelfDescribingThing>;
    getUri(): string;
    setUri(uri: string): void;
    [Symbol.iterator](): Iterator<ThingBase, any, undefined>;
    toRdfjsDataset(): DatasetCore;
}
export default DocumentDefaultImpl;
//# sourceMappingURL=DocumentDefaultImpl.d.ts.map