import { ThingConstructor, ThingWritable } from "../core/Thing";
import { TypeIndexStatement } from "./TypeIndex";
export declare function TypeIndexRegistrationMixin<TBase extends ThingConstructor<ThingWritable<TypeIndexStatement>>>(Base: TBase): {
    new (...args: any[]): {
        isForClass(forClass: string): boolean;
        getFirstElementOrNull(collection: string[]): string | null;
        addForClass(forClass: string): this;
        addInstance(instance: string): this;
        addInstanceContainer(instanceContainer: string): this;
        getForClass(): string | null;
        getForClassAll(): string[];
        getInstance(): string | null;
        getInstanceAll(): string[];
        getInstanceContainer(): string | null;
        getInstanceContainerAll(): string[];
        setForClass(forClass: string): this;
        removeForClass(forClass: string): this;
        removeInstance(instance: string): this;
        removeInstanceContainer(instanceContainer: string): this;
        removeForClassAll(): this;
        removeInstanceAll(): this;
        removeInstanceContainerAll(): this;
        getStatement(property: string, language?: string | undefined): TypeIndexStatement | undefined;
        getStatementAll(property?: string | undefined, language?: string | undefined): TypeIndexStatement[];
        hasStatement(property?: string | undefined, language?: string | undefined): boolean;
        at(index: number): TypeIndexStatement | undefined;
        contains(other: import("../core/Thing").Thing<import("../core/Statement").Statement>): boolean;
        count(): number;
        every(predicate: (value: TypeIndexStatement, index?: number | undefined, array?: TypeIndexStatement[] | undefined) => boolean, thisArg?: any): boolean;
        filter(predicate: (value: TypeIndexStatement, index?: number | undefined, array?: TypeIndexStatement[] | undefined) => boolean): TypeIndexStatement[];
        find(predicate: (value: TypeIndexStatement, index?: number | undefined, obj?: TypeIndexStatement[] | undefined) => boolean, thisArg?: any): TypeIndexStatement | undefined;
        findIndex(predicate: (value: TypeIndexStatement, index?: number | undefined, obj?: TypeIndexStatement[] | undefined) => unknown, thisArg?: any): number;
        forEach(callbackfn: (value: TypeIndexStatement, index?: number | undefined, array?: TypeIndexStatement[] | undefined) => void, thisArg?: any): void;
        includes(searchElement: TypeIndexStatement, fromIndex?: number | undefined): boolean;
        indexOf(searchElement: TypeIndexStatement, fromIndex?: number | undefined): number;
        keys(): IterableIterator<number>;
        map(callbackfn: (value: TypeIndexStatement, index?: number | undefined, array?: TypeIndexStatement[] | undefined) => unknown, thisArg?: any): unknown[];
        reduce(callbackfn: (previousValue: TypeIndexStatement, currentValue: TypeIndexStatement, currentIndex: number, array: TypeIndexStatement[]) => TypeIndexStatement): TypeIndexStatement;
        slice(start?: number | undefined, end?: number | undefined): import("../core/Thing").Thing<import("../core/Statement").Statement>;
        some(predicate: (value: TypeIndexStatement, index?: number | undefined, array?: TypeIndexStatement[] | undefined) => unknown, thisArg?: any): boolean;
        [Symbol.iterator](): Iterator<TypeIndexStatement, any, undefined>;
        getUri(): string;
        hasUri(): boolean;
        getContext(): import("../core/Common").Context | undefined;
        equals(other: ThisType<any>): boolean;
        difference(other: ThisType<any>): ThisType<any>;
        toCopy(): ThisType<any>;
        createStatement(property: string, value: string, datatype?: string | undefined, language?: string | undefined): TypeIndexStatement;
        addStatement(other: import("../core/Statement").Statement): TypeIndexStatement;
        addStatementAll(others: Iterable<import("../core/Statement").Statement>): TypeIndexStatement[];
        setStatement(property: string, value: string, oldValue?: string | undefined, datatype?: string | undefined, language?: string | undefined): TypeIndexStatement | undefined;
        deleteStatement(statement: TypeIndexStatement): boolean;
        pop(): TypeIndexStatement | undefined;
        reverse(): void;
        shift(): TypeIndexStatement | undefined;
        sort(compareFn?: ((a: TypeIndexStatement, b: TypeIndexStatement) => number) | undefined): ThisType<any>;
        splice(start: number, deleteCount?: number | undefined, ...items: TypeIndexStatement[]): ThisType<any>;
    };
} & TBase;
export default TypeIndexRegistrationMixin;
//# sourceMappingURL=TypeIndexRegistrationImpl.d.ts.map