import { DocumentWritableConstructor, Statement } from "../core/Document";
import { TypeIndexStatement } from "./TypeIndex";
export declare function TypeIndexMixin<TBase extends DocumentWritableConstructor<any, any>>(Base: TBase): {
    new (...args: any[]): {
        getStatementForClass(forClass: string): TypeIndexStatement[];
        getStatementForInstance(instance: string): TypeIndexStatement[];
        getStatementForInstanceContainer(instanceContainer: string): TypeIndexStatement[];
        addForClass(forClass: string): this;
        addInstance(instance: string): this;
        addInstanceContainer(instanceContainer: string): this;
        setForClass(forClass: string): this;
        removeForClass(forClass: string): this;
        removeInstance(instance: string): this;
        removeInstanceContainer(instanceContainer: string): this;
        removeForClassAll(): this;
        removeInstanceAll(): this;
        removeInstanceContainerAll(): this;
        forEachOfClass(forClass: string, callbackfn: (value: Statement, index?: number, array?: Statement[]) => void, thisArg?: any): void;
        createRegistrationForInstance(forClass: string, instance: string, nameHintOrUri?: string): ThisType<any>;
        createRegistrationForInstanceContainer(forClass: string, instanceContainer: string, nameHintOrUri?: string): ThisType<any>;
        createStatement(about: string, property: string, value: string, datatype?: string | undefined, language?: string | undefined): any;
        addStatement(other: Statement): ThisType<any>;
        addStatementAll(others: Iterable<Statement>): ThisType<any>;
        createStatementAboutSelf(value: string, property: string, datatype?: string | undefined, language?: string | undefined): ThisType<any>;
        addStatementAboutSelf(other: Statement): ThisType<any>;
        addStatementAboutSelfAll(others: Iterable<Statement>): ThisType<any>;
        deleteStatement(statement: Statement): ThisType<any>;
        pop(): any;
        reverse(): void;
        shift(): any;
        sort(compareFn?: ((a: any, b: any) => number) | undefined): ThisType<any>;
        splice(start: number, deleteCount?: number | undefined, ...items: any[]): ThisType<any>;
        getStatement(about: string, property: string, language?: string | undefined): any;
        getStatementAll(about: string, property?: string | undefined, language?: string | undefined): any[];
        getStatementAboutSelf(property: string, language?: string | undefined): any;
        getStatementAboutSelfAll(property?: string | undefined, language?: string | undefined): any[];
        hasStatement(about: string, property?: string | undefined, language?: string | undefined): boolean;
        hasStatementAboutSelf(property?: string | undefined, language?: string | undefined): boolean;
        at(index: number): any;
        contains(other: import("../core/Document").Document<any, Statement>): boolean;
        count(): number;
        every(predicate: (value: any, index?: number | undefined, array?: any[] | undefined) => boolean, thisArg?: any): boolean;
        filter(predicate: (value: any, index?: number | undefined, array?: any[] | undefined) => boolean): any[];
        find(predicate: (value: any, index?: number | undefined, obj?: any[] | undefined) => boolean, thisArg?: any): any;
        findIndex(predicate: (value: any, index?: number | undefined, obj?: any[] | undefined) => unknown, thisArg?: any): number;
        forEach(callbackfn: (value: any, index?: number | undefined, array?: any[] | undefined) => void, thisArg?: any): void;
        includes(searchElement: any, fromIndex?: number | undefined): boolean;
        indexOf(searchElement: any, fromIndex?: number | undefined): number;
        keys(): IterableIterator<number>;
        map(callbackfn: (value: any, index?: number | undefined, array?: any[] | undefined) => unknown, thisArg?: any): unknown[];
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => Statement): any;
        slice(start?: number | undefined, end?: number | undefined): import("../core/Document").Document<Statement, Statement>;
        some(predicate: (value: any, index?: number | undefined, array?: any[] | undefined) => unknown, thisArg?: any): boolean;
        [Symbol.iterator](): Iterator<any, any, undefined>;
        getUri(): string;
        hasUri(): boolean;
        isEmpty(): boolean;
        getContext(): import("../core/Common").Context | undefined;
        equals(other: ThisType<any>): boolean;
        difference(other: ThisType<any>): ThisType<any>;
        toCopy(): ThisType<any>;
        deleteContext(): void;
        setContext(context: import("../core/Common").Context): void;
    };
} & TBase;
//# sourceMappingURL=TypeIndexImpl.d.ts.map