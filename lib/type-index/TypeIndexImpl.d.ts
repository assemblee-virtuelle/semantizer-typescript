import { DocumentWritableConstructor } from "../core/Document";
import { Thing } from "../core/Thing";
import { TypeIndexStatement } from "./TypeIndex";
import { TypeIndexRegistration } from "./TypeIndexRegistration";
export declare function TypeIndexMixin<TBase extends DocumentWritableConstructor<TypeIndexRegistration, Thing>>(Base: TBase): {
    new (...args: any[]): {
        getStatementForClass(forClass: string): TypeIndexStatement[];
        getStatementForInstance(instance: string): TypeIndexStatement[];
        getStatementForInstanceContainer(instanceContainer: string): TypeIndexStatement[];
        createRegistration(): TypeIndexRegistration;
        addForClass(registration: string | TypeIndexRegistration, forClass: string): TypeIndexRegistration;
        addInstance(registration: string | TypeIndexRegistration, instance: string): TypeIndexRegistration;
        addInstanceContainer(registration: string | TypeIndexRegistration, instanceContainer: string): TypeIndexRegistration;
        setForClass(registration: string | TypeIndexRegistration, forClass: string): TypeIndexRegistration;
        removeForClass(registration: string | TypeIndexRegistration, forClass: string): TypeIndexRegistration;
        removeInstance(registration: string | TypeIndexRegistration, instance: string): TypeIndexRegistration;
        removeInstanceContainer(registration: string | TypeIndexRegistration, instanceContainer: string): TypeIndexRegistration;
        removeForClassAll(registration: string | TypeIndexRegistration): TypeIndexRegistration;
        removeInstanceAll(registration: string | TypeIndexRegistration): TypeIndexRegistration;
        removeInstanceContainerAll(registration: string | TypeIndexRegistration): TypeIndexRegistration;
        forEachOfClass(forClass: string, callbackfn: (value: TypeIndexRegistration, index?: number, array?: TypeIndexRegistration[]) => void, thisArg?: any): void;
        createThing(): TypeIndexRegistration;
        createRegistrationForInstance(forClass: string, instance: string, nameHintOrUri?: string): TypeIndexRegistration;
        createRegistrationForInstanceContainer(forClass: string, instanceContainer: string, nameHintOrUri?: string): TypeIndexRegistration;
        createThingAboutSelf(): Thing<import("../core/Statement").Statement>;
        addThing(other: Thing<import("../core/Statement").Statement>): TypeIndexRegistration;
        addThingAll(others: Iterable<Thing<import("../core/Statement").Statement>>): TypeIndexRegistration[];
        addThingAboutSelf(other: Thing<import("../core/Statement").Statement>): Thing<import("../core/Statement").Statement>;
        addThingAboutSelfAll(others: Iterable<Thing<import("../core/Statement").Statement>>): Thing<import("../core/Statement").Statement>[];
        createStatement(about: string | TypeIndexRegistration, property: string, value: string, datatype?: string | undefined, language?: string | undefined): import("../core/Statement").Statement | undefined;
        createStatementAboutSelf(property: string, value: string, datatype?: string | undefined, language?: string | undefined): import("../core/Statement").Statement;
        addStatement(other: import("../core/Statement").Statement): import("../core/Statement").Statement;
        addStatementAll(others: Iterable<import("../core/Statement").Statement>): import("../core/Statement").Statement[];
        addStatementAboutSelf(other: import("../core/Statement").Statement): import("../core/Statement").Statement;
        addStatementAboutSelfAll(others: Iterable<import("../core/Statement").Statement>): import("../core/Statement").Statement[];
        setStatement(about: string | TypeIndexRegistration, value: string, oldValue?: string | undefined, datatype?: string | undefined, language?: string | undefined): import("../core/Statement").Statement | undefined;
        setStatementAboutSelf(value: string, oldValue?: string | undefined, datatype?: string | undefined, language?: string | undefined): import("../core/Statement").Statement | undefined;
        deleteThing(thingOrUri: string | Thing<import("../core/Statement").Statement>): boolean;
        deleteStatement(statement: import("../core/Statement").Statement): boolean;
        pop(): TypeIndexRegistration | undefined;
        reverse(): void;
        shift(): TypeIndexRegistration | undefined;
        sort(compareFn?: ((a: TypeIndexRegistration, b: TypeIndexRegistration) => number) | undefined): ThisType<any>;
        splice(start: number, deleteCount?: number | undefined, ...items: TypeIndexRegistration[]): ThisType<any>;
        getThing(about: string): TypeIndexRegistration | undefined;
        getThingAboutSelf(): Thing<import("../core/Statement").Statement> | undefined;
        hasThing(about: string): boolean;
        hasThingAboutSelf(): boolean;
        getStatement(about: string | Thing<import("../core/Statement").Statement>, property: string, language?: string | undefined): import("../core/Statement").Statement | undefined;
        getStatementAll(about: string | Thing<import("../core/Statement").Statement>, property?: string | undefined, language?: string | undefined): import("../core/Statement").Statement[];
        getStatementAboutSelf(property: string, language?: string | undefined): import("../core/Statement").Statement | undefined;
        getStatementAboutSelfAll(property?: string | undefined, language?: string | undefined): import("../core/Statement").Statement[];
        hasStatement(about: string | Thing<import("../core/Statement").Statement>, property?: string | undefined, language?: string | undefined): boolean;
        hasStatementAboutSelf(property?: string | undefined, language?: string | undefined): boolean;
        at(index: number): TypeIndexRegistration | undefined;
        contains(other: import("../core/Document").Document<any, Thing<import("../core/Statement").Statement>>): boolean;
        count(): number;
        every(predicate: (value: TypeIndexRegistration, index?: number | undefined, array?: TypeIndexRegistration[] | undefined) => boolean, thisArg?: any): boolean;
        filter(predicate: (value: TypeIndexRegistration, index?: number | undefined, array?: TypeIndexRegistration[] | undefined) => boolean): TypeIndexRegistration[];
        filterContainedStatement(predicate: (value: import("../core/Statement").Statement, index?: number | undefined, array?: import("../core/Statement").Statement[] | undefined) => boolean): import("../core/Statement").Statement[];
        find(predicate: (value: TypeIndexRegistration, index?: number | undefined, obj?: TypeIndexRegistration[] | undefined) => boolean, thisArg?: any): TypeIndexRegistration | undefined;
        findIndex(predicate: (value: TypeIndexRegistration, index?: number | undefined, obj?: TypeIndexRegistration[] | undefined) => unknown, thisArg?: any): number;
        forEach(callbackfn: (value: TypeIndexRegistration, index?: number | undefined, array?: TypeIndexRegistration[] | undefined) => void, thisArg?: any): void;
        forEachStatement(callbackfn: (value: import("../core/Statement").Statement, index?: number | undefined, array?: import("../core/Statement").Statement[] | undefined) => void, thisArg?: any): void;
        includes(searchElement: TypeIndexRegistration, fromIndex?: number | undefined): boolean;
        indexOf(searchElement: TypeIndexRegistration, fromIndex?: number | undefined): number;
        keys(): IterableIterator<number>;
        map(callbackfn: (value: TypeIndexRegistration, index?: number | undefined, array?: TypeIndexRegistration[] | undefined) => unknown, thisArg?: any): unknown[];
        reduce(callbackfn: (previousValue: TypeIndexRegistration, currentValue: TypeIndexRegistration, currentIndex: number, array: TypeIndexRegistration[]) => Thing<import("../core/Statement").Statement>): TypeIndexRegistration;
        slice(start?: number | undefined, end?: number | undefined): ThisType<any>;
        some(predicate: (value: TypeIndexRegistration, index?: number | undefined, array?: TypeIndexRegistration[] | undefined) => unknown, thisArg?: any): boolean;
        [Symbol.iterator](): Iterator<TypeIndexRegistration, any, undefined>;
        getUri(): string;
        hasUri(): boolean;
        getContext(): import("../core/Common").Context | undefined;
        equals(other: ThisType<any>): boolean;
        difference(other: ThisType<any>): ThisType<any>;
        toCopy(): ThisType<any>;
        deleteContext(): void;
        setContext(context: import("../core/Common").Context): void;
    };
} & TBase;
//# sourceMappingURL=TypeIndexImpl.d.ts.map